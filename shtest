#!/bin/sh
#
# `shtest` : POSIX sh test runner.

main() {
	if test $# -eq 0; then
		set -- tests/
	fi

	for arg in "$@"; do
		if test -d "$1"; then
			set -- "$@" $(find "$1" -type f -name 'test_*.sh')
			shift
		fi

		if ! test -f "$1"; then
			err "file not found: $1"
		fi
	done

	if test $# -eq 0; then
		err "no test files found"
	fi

	total=0
	passed=0
	failed=0

	for file in "$@"; do
		for test in $(sed -n '/^test_/s/[ (].*//p' "$file"); do
			sh <<EOF
assert() {
	# Usage: assert <command> [<message>]
	#
	# Execute <command>. If it succeeds, return success. Otherwise,
	# print <message> to stderr and return failure.
	#
	cmd="\$1"
	msg="\$2"
	if \$cmd; then
		return 0
	fi
	if test -n "\$msg"; then
		echo "\$msg" >&2
	fi
	return 1
}

assert_equal() {
	# Usage: assert_equal <actual> <expected> [<message>]
	#
	# If <actual> is equal to <expected>, return success. Otherwise,
	# print <message> to stderr and return failure.
	#
	actual="\$1"
	expected="\$2"
	msg="\$3"
	if test -z "\$msg"; then
		msg=\$\(printf "expected: '%s'\nactual: '%s'\n" \
			"\$expected" "\$actual"\)
	fi
	assert "test '\$actual' = '\$expected'" "\$msg"
}

assert_regex_match() {
	# Usage: assert_regex_match <output> <regex> [<message>]
	#
	# If <output> matches the POSIX basic regular expression (BRE)
	# <regex>, return success. Otherwise, print <message> to stderr
	# and return failure.
	#
	output="\$1"
	regex="\$2"
	msg="\$3"
	if test -z "\$msg"; then
		msg=\$\(printf 'regex: /%s/\ndid not match output:\n%s\n' \
			"\$regex" "\$output"\)
	fi
	assert "expr '\$output' : '\$regex'" "\$msg"
}

. "$file"

if command -v setup >/dev/null; then
	setup
fi

__shtest_errfile=".${test}.err"
printf '%s' "$test"

if "$test" >/dev/null 2>"\$__shtest_errfile"; then
	printf '...\033[32m%s\033[m\n' 'OK'
	__shtest_exit_code=0
else
	printf '...\033[1;31m%s\033[m:\n' 'FAILED'
	awk '{ sub(/.*/, "\033[31m&\033[m"); print }' "\$__shtest_errfile"
	__shtest_exit_code=1
fi

if command -v teardown >/dev/null; then
	teardown
fi

rm "\$__shtest_errfile"

exit \$((__shtest_exit_code))
EOF
			if test $? -eq 0; then
				passed=$((passed + 1))
			else
				failed=$((failed + 1))
			fi

			total=$((total + 1))
		done
	done

	printf '\nRan \033[1m%s\033[m test(s):\n' "$total"

	if test "$passed" -gt 0; then
		printf '\033[32mPassed: \033[1m%s\033[m\n' "$passed"
	fi

	if test "$failed" -gt 0; then
		printf '\033[31mFailed: \033[1m%s\033[m\n' "$failed"
	fi

	echo
}

err() {
	printf '%s: %s' "${0##*/}" "$*" >&2
	exit 1
}

main "$@"
